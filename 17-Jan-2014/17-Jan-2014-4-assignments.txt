1. What is the output of the below program when compiled and executed?
    // Filename: Animal.java
    class Animal
    {
        void makeNoise()
        {
            System.out.println("generic noise");
        }
    }

    // Filename: Dog.java
    class Dog extends Animal
    {
        void makeNoise()
        {
            System.out.println("bark");
        }
        void playDead()
        {
            System.out.println("roll over");
        }
    }

    // Filename: ExplicitCasting.java
    class ExplicitCasting2
    {
        public static void main(String [] args)
        {
            Animal [] a = {new Animal(), new Dog(), new Animal()};
            for(Animal animal : a)
            {
                animal.makeNoise();
                if(animal instanceof Dog)
                {
                    animal.playDead();
                }
            }
        }
    }
    (a) Prints the below output:
        generic noise
        generic noise
        roll over
        generic noise
    (b) Prints the below output:
        generic noise
        bark
        roll over
        generic noise
    (c) Compilation error? Why?


2. What is the output of the below program when compiled and executed?
    // Filename: Top.java
    public class Top
    {
        public Top(String s)
        {
            System.out.print("B");
        }
    }

    // Filename: Bottom2.java
    public class Bottom2 extends Top
    {
        public Bottom2(String s)
        {
            System.out.print("D");
        }
        public static void main(String [] args)
        {
            new Bottom2("C");
            System.out.println(" ");
        }
    }
    Prints the output?
    A. BD
    B. DB
    C. BDC
    D. DBC
    E. Compilation fails


3. What is the output of the below program when compiled and executed
    // Filename: Portal.java
    public class Portal
    {
        private final void print()
        {
            System.out.println("Portal");
        }
    }

    // Filename: Portlet.java
    public class Portlet extends Portal
    {
        public final void print()
        {
            System.out.println("Portlet");
        }
        public static void main(String [] args)
        {
            new Portlet().print();
        }
    }
    Prints the output?
    A. Portlet
    B. Portal
    C. Portal
        Portlet
    D. Portlet
        Portal
    E. Compilation fails

4. Given the following,
    // Filename: Base.java
    public class Base
    {
        void do1()
        {
        }
    }

    // Filename: Derived.java
    public class Derived extends Base
    {
        void do2()
        {
        }
    }

    // Filename: Chrome.java
    public class Chrome
    {
        public static void main(String [] args)
        {
            Base x1 = new Base();
            Base x2 = new Derived();
            Derived y1 = new Derived();
            // insert code here         // 1.
        }
    }
    Which, inserted at line identified by "// 1.", will compile? (Choose all that apply.)
    A. x2.do2();
    B. (Derived)x2.do2();
    C. ((Derived)x2).do2();
    D. None of the above statements will compile


5.  What is the output of the below program when compiled and executed
    // Filename: Dog.java
    class Dog
    {
        public void bark()
        {
            System.out.print("woof ");
        }
    }

    // Filename: Hound.java
    class Hound extends Dog
    {
        public void sniff()
        {
            System.out.print("sniff ");
        }
        public void bark()
        {
            System.out.print("howl ");
        }
    }

    // Filename: DogShow.java
    public class DogShow
    {
        public static void main(String[] args)
        {
            new DogShow().go();
        }
        void go()
        {
            new Hound().bark();
            ((Dog) new Hound()).bark();         // 1.
            ((Dog) new Hound()).sniff();        // 2.
        }
    }
    Prints the below output (Choose all that apply.)
    A. howl howl sniff
    B. howl woof sniff
    C. howl howl followed by an exception
    D. howl woof followed by an exception
    E. Compilation fails with an error at line identified by "1."
    F. Compilation fails with an error at line identified by "2."

6.  What is the output of the below program when compiled and executed:
    // Filename: Redwood.java
    public class Redwood extends Tree
    {
        public static void main(String[] args)
        {
            new Redwood().go();
        }
        void go()
        {
            go2(new Tree(), new Redwood());             // 1.
            go2((Redwood) new Tree(), new Redwood());   // 2.
        }
        void go2(Tree t1, Redwood r1)
        {
            Redwood r2 = (Redwood)t1;                   // 3.
            Tree t2 = (Tree)r1;                         // 4.
        }
    }

    // Filename: Tree.java
    public class Tree
    {
    }
    What is the result? (Choose all that apply.)
    A. An exception is thrown at runtime
    B. The code compiles and runs with no output
    C. Compilation fails with an error at line identified by "1."
    D. Compilation fails with an error at line identified by "2."
    E. Compilation fails with an error at line identified by "3."
    F. Compilation fails with an error at line identified by "4."

7.  What is the output of the below program when compiled and executed:
    // Filename: Tenor.java
    public class Tenor extends Singer
    {
        public static String sing()
        {
            return "fa";
        }
        public static void main(String[] args)
        {
            Tenor t = new Tenor();
            Singer s = new Tenor();
            System.out.println(t.sing() + " " + s.sing());
        }
    }

    // Filename: Singer.java
    class Singer
    {
        public static String sing()
        {
            return "la";
        }
    }
    Prints the below output:
    A. fa fa
    B. fa la
    C. la la
    D. Compilation fails
    E. An exception is thrown at runtime


8.  What is the output of the below program when compiled and executed:
    // Filename: Alpha.java
    public class Alpha
    {
        static String s = " ";
        protected Alpha()
        {
            s += "alpha ";
        }
    }

    // Filename: SubAlpha.java
    public class SubAlpha extends Alpha
    {
        private SubAlpha()
        {
            s += "sub ";
        }
    }

    // Filename: SubSubAlpha.java
    public class SubSubAlpha extends Alpha
    {
        private SubSubAlpha()
        {
            s += "subsub ";
        }
        public static void main(String[] args)
        {
            new SubSubAlpha();
            System.out.println(s);
        }
    }
    Prints the below output
    A. subsub
    B. sub subsub
    C. alpha subsub
    D. alpha sub subsub
    E. Compilation fails
    F. An exception is thrown at runtime


9.  What is the output of the below program when compiled and executed:
    // Filename: Building.java
    class Building
    {
        Building()
        {
            System.out.print("b ");
        }
        Building(String name)
        {
            this();
            System.out.print("bn " + name);
        }
    }

    // Filename: House.java
    public class House extends Building
    {
        House()
        {
            System.out.print("h ");
        }
        House(String name)
        {
            this();
            System.out.print("hn " + name);
        }
        public static void main(String[] args)
        {
            new House("x ");
        }
    }
    Prints the below output:
    A. h hn x
    B. hn x h
    C. b h hn x
    D. b hn x h
    E. bn x h hn x
    F. b bn x h hn x
    G. bn x b h hn x
    H. Compilation fails


10. What is the output of the below program when compiled and executed:
    // Filename: Mammal.java
    class Mammal
    {
        String name = "furry ";
        String makeNoise()
        {
            return "generic noise";
        }
    }

    // Filename: Zebra.java
    class Zebra extends Mammal
    {
        String name = "stripes ";
        String makeNoise()
        {
            return "bray";
        }
    }

    // Filename: ZooKeeper.java
    public class ZooKeeper
    {
        public static void main(String[] args)
        {
            new ZooKeeper().go();
        }
        void go()
        {
            Mammal m = new Zebra();
            System.out.println(m.name + m.makeNoise());
        }
    }
    Prints the below output:
    A. furry bray
    B. stripes bray
    C. furry generic noise
    D. stripes generic noise
    E. Compilation fails
    F. An exception is thrown at runtime


11. Youâ€™re designing a new online board game in which Floozels are a type of Jammers, Jammers can
    have Quizels, Quizels are a type of Klakker, and Floozels can have several Floozets. Which of the
    following fragments represent this design? (Choose all that apply.)

A.  import java.util.*;
    interface Klakker { }
    class Jammer { Set<Quizel> q; }
    class Quizel implements Klakker { }
    public class Floozel extends Jammer { List<Floozet> f; }
    interface Floozet { }

B.  import java.util.*;
    class Klakker { Set<Quizel> q; }
    class Quizel extends Klakker { }
    class Jammer { List<Floozel> f; }
    class Floozet extends Floozel { }
    public class Floozel { Set<Klakker> k; }

C.  import java.util.*;
    class Floozet { }
    class Quizel implements Klakker { }
    class Jammer { List<Quizel> q; }
    interface Klakker { }
    class Floozel extends Jammer { List<Floozet> f; }

D.  import java.util.*;
    interface Jammer extends Quizel { }
    interface Klakker { }
    interface Quizel extends Klakker { }
    interface Floozel extends Jammer, Floozet { }
    interface Floozet { }

12. What is the output of the below program when compiled and executed:
    // Filename: Plane.java
    public class Plane
    {
        static String s = "-";
        public static void main(String[] args)
        {
            new Plane().s1();
            System.out.println(s);
        }
        void s1()
        {
            try
            {
                s2();
            }
            catch (Exception e)
            {
                s += "c";
            }
        }
        void s2() throws Exception
        {
            s3(); s += "2";
            s3(); s += "2b";
        }
        void s3() throws Exception
        {
            throw new Exception();
        }
    }
    Prints the below output:
    A. -
    B. -c
    C. -c2
    D. -2c
    E. -c22b
    F. -2c2b
    G. -2c2bc
    H. Compilation fails


13. Given the below snippet:
    try
    {
        int x = Integer.parseInt("two");
    }
    Which could be used to create an appropriate catch block? (Choose all that apply.)
    A. ClassCastException
    B. IllegalStateException
    C. NumberFormatException
    D. IllegalArgumentException
    E. ExceptionInInitializerError
    F. ArrayIndexOutOfBoundsException

14. Given the below program:
    // Filename: Loopy.java
    public class Loopy
    {
        public static void main(String[] args)
        {
            int[] x = {7,6,5,4,3,2,1};
            // insert code here
                System.out.print(y + " ");
            }
        }
    }
    Which, inserted independently at line 4, compiles? (Choose all that apply.)
    A. for(int y : x) {
    B. for(x : int y) {
    C. int y = 0; for(y : x) {
    D. for(int y=0, z=0; z<x.length; z++) { y = x[z];
    E. for(int y=0, int z=0; z<x.length; z++) { y = x[z];
    F. int y = 0; for(int z=0; z<x.length; z++) { y = x[z];


15. What is the output of the below program when compiled and executed:
    // Filename: Emu.java
    public class Emu
    {
        static String s = "-";
        public static void main(String[] args)
        {
            try
            {
                throw new Exception();
            }
            catch (Exception e)
            {
                try
                {
                    try
                    {
                        throw new Exception();
                    }
                    catch (Exception ex)
                    {
                        s += "ic ";
                    }
                    throw new Exception();
                }
                catch (Exception x)
                {
                    s += "mc ";
                }
                finally
                {
                    s += "mf ";
                }
            }
            finally
            {
                s += "of ";
            }
            System.out.println(s);
        }
    }
    Prints the below output:
    A. -ic of
    B. -mf of
    C. -mc mf
    D. -ic mf of
    E. -ic mc mf of
    F. -ic mc of mf
    G. Compilation fails


16. Given the below program:
    public class SubException extends Exception { }
    public class SubSubException extends SubException { }
    public class CC { void doStuff() throws SubException { } }
    class CC2 extends CC { void doStuff() throws SubSubException { } }  // 1.
    class CC3 extends CC { void doStuff() throws Exception { } }        // 2.
    class CC4 extends CC { void doStuff(int x) throws Exception { } }   // 3.
    class CC5 extends CC { void doStuff() { } }                         // 4.

    What is the result? (Choose all that apply.)
    A. Compilation succeeds
    B. Compilation fails due to an error on line identified by "1."
    C. Compilation fails due to an error on line identified by "2."
    D. Compilation fails due to an error on line identified by "3."
    E. Compilation fails due to an error on line identified by "4."


17. What is the output of the below program when compiled and executed:
    // Filename: Ebb.java
    public class Ebb
    {
        static int x = 7;
        public static void main(String[] args)
        {
            String s = "";
            for(int y = 0; y < 3; y++)
            {
                x++;
                switch(x)
                {
                    case 8:
                        s += "8 ";
                    case 9:
                        s += "9 ";
                    case 10:
                    {
                        s+= "10 ";
                        break;
                    }
                    default:
                        s += "d ";
                    case 13:
                        s+= "13 ";
                }
            }
            System.out.println(s);
        }
        static
        {
            x++;
        }
    }
    What is the result?
    A. 9 10 d
    B. 8 9 10 d
    C. 9 10 10 d
    D. 9 10 10 d 13
    E. 8 9 10 10 d 13
    F. 8 9 10 9 10 10 d 13
    G. Compilation fails


18. What is the output of the below program when compiled and executed:
    // Filename: Circles.java
    public class Circles
    {
        public static void main(String[] args)
        {
            int[] ia = {1,3,5,7,9};
            for(int x : ia)
            {
                for(int j = 0; j < 3; j++)
                {
                    if(x > 4 && x < 8)
                        continue;
                    System.out.print(" " + x);
                    if(j == 1)
                        break;
                    continue;
                }
                continue;
            }
        }
    }
    What is the result?
    A. 1 3 9
    B. 5 5 7 7
    C. 1 3 3 9 9
    D. 1 1 3 3 9 9
    E. 1 1 1 3 3 3 9 9 9
    F. Compilation fails


19. What is the output of the below program when compiled and executed:
    public class OverAndOver
    {
        static String s = "";
        public static void main(String[] args)
        {
            try
            {
                s += "1";
                throw new Exception();
            }
            catch (Exception e)
            {
                s += "2";
            }
            finally
            {
                s += "3";
                doStuff();
                s += "4";
            }
            System.out.println(s);
        }
        static void doStuff()
        {
            int x = 0;
            int y = 7/x;
        }
    }
    Prints the below output:
    A. 12
    B. 13
    C. 123
    D. 1234
    E. Compilation fails
    F. 123 followed by an exception
    G. 1234 followed by an exception
    H. An exception is thrown with no other output

20. Given the below code:
    // Filename: Gotcha.java
    public class Gotcha
    {
        public static void main(String[] args)
        {
            // insert code here                 // 1.
        }
        void go()
        {
            go();
        }
    }
    And given the following three code fragments:
    I. new Gotcha().go();
    II. try
        {
            new Gotcha().go();
        }
        catch (Error e)
        {
            System.out.println("ouch");
        }
    III. try
        {
            new Gotcha().go();
        }
        catch (Exception e)
        {
            System.out.println("ouch");
        }
    When fragments I - III are added, independently, at line identified by "1.", which are true? (Choose all that apply.)
    A. Some will not compile
    B. They will all compile
    C. All will complete normally
    D. None will complete normally
    E. Only one will complete normally
    F. Two of them will complete normally

21. Given the below code:
    // Filename: MyException.java
    public class MyException extends Exception
    {
    }
    // Filename: Tire.java
    public class Tire
    {
        void doStuff()
        {
        }
    }
    // Filename: Retread.java
    public class Retread extends Tire
    {
        public static void main(String[] args)
        {
            new Retread().doStuff();
        }
        // insert code here                 // 1.
            System.out.println(7/0);
        }
    }
    And given the following four code fragments:
    I.  void doStuff()
        {
    II. void doStuff() throws MyException
        {
    III.void doStuff() throws RuntimeException
        {
    IV. void doStuff() throws ArithmeticException
        {
    When fragments I - IV are added, independently, at line identified by "1.", which are true? (Choose all that apply.)
    A. None will compile
    B. They will all compile
    C. Some, but not all, will compile
    D. All of those that compile will throw an exception at runtime
    E. None of those that compile will throw an exception at runtime
    F. Only some of those that compile will throw an exception at runtime

22. Given the below program:
    public static void main(String[] args)
    {
        // INSERT DECLARATION HERE
        for (int i = 0; i <= 10; i++)
        {
            List<Integer> row = new ArrayList<Integer>();
            for (int j = 0; j <= 10; j++)
                row.add(i * j);
            table.add(row);
        }
        for (List<Integer> row : table)
            System.out.println(row);
    }
    Which statements could be inserted at "// INSERT DECLARATION HERE" to allow this code to compile and run? (Choose all that apply.)
    A. List<List<Integer>> table = new List<List<Integer>>();
    B. List<List<Integer>> table = new ArrayList<List<Integer>>();
    C. List<List<Integer>> table = new ArrayList<ArrayList<Integer>>();
    D. List<List, Integer> table = new List<List, Integer>();
    E. List<List, Integer> table = new ArrayList<List, Integer>();
    F. List<List, Integer> table = new ArrayList<ArrayList, Integer>();
    G. None of the above

23. Given the below program:
    public static void before()
    {
        Set set = new TreeSet();
        set.add("2");
        set.add(3);
        set.add("1");
        Iterator it = set.iterator();
        while (it.hasNext())
            System.out.print(it.next() + " ");
    }
    Which statements are true?
    A. The before() method will print 1 2
    B. The before() method will print 1 2 3
    C. The before() method will print three numbers, but the order cannot be determined
    D. The before() method will not compile
    E. The before() method will throw an exception at runtime


24. Given the below program:
    // Filename: MapEQ.java
    import java.util.*;
    class MapEQ
    {
        public static void main(String[] args)
        {
            Map<ToDos, String> m = new HashMap<ToDos, String>();
            ToDos t1 = new ToDos("Monday");
            ToDos t2 = new ToDos("Monday");
            ToDos t3 = new ToDos("Tuesday");
            m.put(t1, "doLaundry");
            m.put(t2, "payBills");
            m.put(t3, "cleanAttic");
            System.out.println(m.size());
        }
    }

    // Filename: ToDos.java
    class ToDos
    {
        String day;
        ToDos(String d)
        {
            day = d;
        }
        public boolean equals(Object o)
        {
            return ((ToDos)o).day == this.day;
        }
        // public int hashCode() { return 9; }
    }
    Which is correct? (Choose all that apply.)
    A. As the code stands it will not compile
    B. As the code stands the output will be 2
    C. As the code stands the output will be 3
    D. If the hashCode() method is uncommented the output will be 2
    E. If the hashCode() method is uncommented the output will be 3
    F. If the hashCode() method is uncommented the code will not compile


25. Given the below program:
    // Filename: AccountManager.java
    public class AccountManager
    {
        private Map accountTotals = new HashMap();
        private int retirementFund;
        public int getBalance(String accountName)
        {
            Integer total = (Integer) accountTotals.get(accountName);
            if (total == null)
                total = Integer.valueOf(0);
            return total.intValue();
        }
        public void setBalance(String accountName, int amount)
        {
            accountTotals.put(accountName, Integer.valueOf(amount));
        }
    }
    This class is to be updated to make use of appropriate generic types, with no changes in behavior
    (for better or worse). Which of these steps could be performed? (Choose three.)
    A.  Replace line 13 with
        private Map<String, int> accountTotals = new HashMap<String, int>();
    B.  Replace line 13 with
        private Map<String, Integer> accountTotals = new HashMap<String, Integer>();
    C.  Replace line 13 with
        private Map<String<Integer>> accountTotals = new HashMap<String<Integer>>();
    D.  Replace lines 17â€“20 with
        int total = accountTotals.get(accountName);
        if (total == null)
        total = 0;
        return total;
    E.  Replace lines 17â€“20 with
        Integer total = accountTotals.get(accountName);
        if (total == null)
        total = 0;
        return total;
    F.  Replace lines 17â€“20 with
        return accountTotals.get(accountName);
        G. Replace line 24 with
        accountTotals.put(accountName, amount);
    H.  Replace line 24 with
        accountTotals.put(accountName, amount.intValue());


26. Given the proper import statement(s), and
    PriorityQueue<String> pq = new PriorityQueue<String>();
    pq.add("2");
    pq.add("4");
    System.out.print(pq.peek() + " ");
    pq.offer("1");
    pq.add("3");
    pq.remove("1");
    System.out.print(pq.poll() + " ");
    if(pq.remove("2"))
        System.out.print(pq.poll() + " ");
    System.out.println(pq.poll() + " " + pq.peek());
    What is the result?
    A. 2 2 3 3
    B. 2 2 3 4
    C. 4 3 3 4
    D. 2 2 3 3 3
    E. 4 3 3 3 3
    F. 2 2 3 3 4
    G. Compilation fails
    H. An exception is thrown at runtime


27. Given the below code:
    // Filename: Mixup.java
    import java.util.*;
    public class Mixup
    {
        public static void main(String[] args)
        {
            Object o = new Object();
            // insert code here             // 1.
            s.add("o");
            s.add(o);
        }
    }
    And these three fragments:
    I. Set s = new HashSet();
    II. TreeSet s = new TreeSet();
    III. LinkedHashSet s = new LinkedHashSet();
    When fragments I, II, or III are inserted, independently, at line identified by "1.", which are true?
    (Choose all that apply.)
    A. Fragment I compiles
    B. Fragment II compiles
    C. Fragment III compiles
    D. Fragment I executes without exception
    E. Fragment II executes without exception
    F. Fragment III executes without exception

28. Given the below program:
    // Filename: Turtle.java
    import java.util.*;
    class Turtle
    {
        int size;
        public Turtle(int s)
        {
            size = s;
        }
        public boolean equals(Object o)
        {
            return (this.size == ((Turtle)o).size);
        }
        // insert code here
    }

    // Filename: TurtleTest.java
    public class TurtleTest
    {
        public static void main(String[] args)
        {
            LinkedHashSet<Turtle> t = new LinkedHashSet<Turtle>();
            t.add(new Turtle(1));
            t.add(new Turtle(2));
            t.add(new Turtle(1));
            System.out.println(t.size());
        }
    }
    And these two fragments:
    I.  public int hashCode()
        {
            return size/5;
        }
    II. // no hashCode method declared
    If fragment I or II is inserted, independently, at line 8, which are true? (Choose all that apply.)
    A. If fragment I is inserted, the output is 2
    B. If fragment I is inserted, the output is 3
    C. If fragment II is inserted, the output is 2
    D. If fragment II is inserted, the output is 3
    E. If fragment I is inserted, compilation fails
    F. If fragment II is inserted, compilation fails


29. Given the proper import statement(s), and:
    TreeSet<String> s = new TreeSet<String>();
    TreeSet<String> subs = new TreeSet<String>();
    s.add("a");
    s.add("b");
    s.add("c");
    s.add("d");
    s.add("e");
    subs = (TreeSet)s.subSet("b", true, "d", true);
    s.add("g");
    s.pollFirst();
    s.pollFirst();
    s.add("c2");
    System.out.println(s.size() +" "+ subs.size());

    Which are true? (Choose all that apply.)
    A. The size of s is 4
    B. The size of s is 5
    C. The size of s is 7
    D. The size of subs is 1
    E. The size of subs is 2
    F. The size of subs is 3
    G. The size of subs is 4
    H. An exception is thrown at runtime

30. Given the below program:
    // Filename: Magellan.java
    import java.util.*;
    public class Magellan
    {
        public static void main(String[] args)
        {
            TreeMap<String, String> myMap = new TreeMap<String, String>();
            myMap.put("a", "apple");
            myMap.put("d", "date");
            myMap.put("f", "fig");
            myMap.put("p", "pear");
            System.out.println("1st after mango: " + myMap.higherKey("f"));     // sop 1
            System.out.println("1st after mango: " + myMap.ceilingKey("f"));    // sop 2
            System.out.println("1st after mango: " + myMap.floorKey("f"));      // sop 3
            SortedMap<String, String> sub = new TreeMap<String, String>();
            sub = myMap.tailMap("f");
            System.out.println("1st after mango: " + sub.firstKey());           // sop 4
        }
    }
    Which of the System.out.println statements will produce the output 1st after mango: p?
    (Choose all that apply.)
    A. sop 1
    B. sop 2
    C. sop 3
    D. sop 4
    E. None; compilation fails
    F. None; an exception is thrown at runtime


31. Given the below program:
    // Filename: Business.java
    import java.util.*;
    class Business
    {
    }

    // Filename: Hotel.java
    class Hotel extends Business
    {
    }

    // Filename: Inn.java
    class Inn extends Hotel
    {
    }

    // Filename: Travel.java
    public class Travel
    {
        ArrayList<Hotel> go()
        {
        // insert code here
        }
    }
    Which, inserted independently at line 9, will compile? (Choose all that apply.)
    A. return new ArrayList<Inn>();
    B. return new ArrayList<Hotel>();
    C. return new ArrayList<Object>();
    D. return new ArrayList<Business>();


32. Given the below program:
    // Filename: Dog.java
    import java.util.*;
    class Dog
    {
        int size;
        Dog(int s)
        {
            size = s;
        }
    }

    // Filename: FirstGrade.java
    public class FirstGrade
    {
        public static void main(String[] args)
        {
            TreeSet<Integer> i = new TreeSet<Integer>();
            TreeSet<Dog> d = new TreeSet<Dog>();
            d.add(new Dog(1));
            d.add(new Dog(2));
            d.add(new Dog(1));
            i.add(1);
            i.add(2);
            i.add(1);
            System.out.println(d.size() + " " + i.size());
        }
    }
    What is the result?
    A. 1 2
    B. 2 2
    C. 2 3
    D. 3 2
    E. 3 3
    F. Compilation fails
    G. An exception is thrown at runtime
